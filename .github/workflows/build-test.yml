# This is a basic workflow to help you get started with Actions

name: CI

on:
  pull_request:
    branches: [main-msp, dev-msp]

jobs:
  #### RE-ENABLE: when merging new framework updates from nasa/fprime/master
  # Framework:
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #   - uses: actions/checkout@v2
  #   - uses: actions/cache@v2
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
  #   - name: Install fprime tools
  #     run: pip3 install fprime-tools fprime-gds
  #   - name: F prime CI step
  #     run: ./ci/tests/Framework.bash
  #   # Archive the outputs
  #   - name: 'Archive Logs'
  #     uses: actions/upload-artifact@v2
  #     if: always()
  #     with:
  #       name: ci-framework-logs
  #       path: ci-logs.tar.gz
  #       retention-days: 5

  Ref:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install fprime tools
      run: pip3 install fprime-tools fprime-gds
    - name: F prime CI step
      run: ./ci/tests/Framework.bash
    # Archive the outputs
    - name: 'Archive Logs'
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ci-framework-logs
        path: ci-logs.tar.gz
        retention-days: 5

  Ref:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout F´ Repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup
      - name: F prime CI step
        run: ./ci/tests/Ref.bash
      # Archive the outputs
      - name: "Archive Logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ci-ref-logs
          path: ci-logs.tar.gz
          retention-days: 5

  #### RE-ENABLE: when integration tests are written
  # Integration:
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #   - uses: actions/checkout@v2
  #   - name: Install fprime tools
  #     run: pip3 install fprime-tools fprime-gds
  #   - name: Setup Dependencies
  #     run: sudo apt-get install valgrind
  #   - name: F prime CI step
  #     run: ./ci/tests/30-ints.bash
  #   # Archive the outputs
  #   - name: 'Archive Logs'
  #     uses: actions/upload-artifact@v2
  #     if: always()
  #     with:
  #       name: ci-int-logs
  #       path: ci-logs.tar.gz
  #       retention-days: 5

  Compilation:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install fprime tools
      run: pip3 install fprime-tools fprime-gds
    - name: Install RPI Toolchain
      run: sudo git clone https://github.com/raspberrypi/tools.git /opt/rpi/tools
    - name: F prime CI step
      run: ./ci/tests/RPI.bash
    # Archive the outputs
    - name: 'Archive Logs'
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: ci-rpi-logs
        path: ci-logs.tar.gz
        retention-days: 5

  Integration:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install fprime tools
        run: pip3 install fprime-tools fprime-gds
      - name: Setup Dependencies
        run: sudo apt-get install valgrind
      - name: F prime CI step
        run: ./ci/tests/30-ints.bash
      # Archive the outputs
      - name: "Archive Logs"
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ci-int-logs
          path: ci-logs.tar.gz
          retention-days: 5

  Compilation:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout F´ Repository"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup
      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install clang-tidy-12
      - name: General Static Analysis
        run: |
          fprime-util generate --ut -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_CXX_CLANG_TIDY=clang-tidy-12
          fprime-util build --all --ut
      - name: Flight Code Static Analysis
        run: |
          fprime-util generate -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_CXX_CLANG_TIDY="clang-tidy-12;--config-file=$PWD/release.clang-tidy"
          fprime-util build --all -j4

  CMake:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install fprime tools
      run: pip3 install fprime-tools fprime-gds
    - name: CMake Tests
      working-directory: ./cmake/test
      run: pytest
